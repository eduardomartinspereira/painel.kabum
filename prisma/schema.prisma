generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  cpf       String?  @unique
  password  String?
  firstName String?
  lastName  String?
  phone     String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  accessLogs AccessLog[]
}

model Product {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  basePrice   Decimal            @db.Decimal(10, 2)
  brand       String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  images      ProductImage[]
  variations  ProductVariation[]
  categoryId  Int?
  category    Category?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model ProductVariation {
  id        Int      @id @default(autoincrement())
  productId Int
  size      String?
  color     String?
  material  String?
  stock     Int      @default(0)
  price     Decimal  @db.Decimal(10, 2)
  sku       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductVariation_productId_fkey")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String   @db.Text
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductImage_productId_fkey")
}

model Payment {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  mercadopagoId     String         @unique
  externalReference String         @unique
  amount            Decimal        @db.Decimal(10, 2)
  currency          String         @default("BRL")
  status            PaymentStatus
  paymentMethod     String
  payerName         String
  payerEmail        String
  payerCpf          String
  description       String?
  items             Json?
  receiptUrl        String?
  successUrl        String?
  failureUrl        String?
  mpCreatedAt       DateTime?
  mpUpdatedAt       DateTime?
  mpStatusDetail    String?
  mpRejectionReason String?
  webhookEvents     WebhookEvent[]

  @@map("payments")
}

model WebhookEvent {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  paymentId   String
  eventType   String
  eventData   Json
  processed   Boolean   @default(false)
  processedAt DateTime?
  error       String?
  payment     Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([paymentId], map: "webhook_events_paymentId_fkey")
  @@map("webhook_events")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  IN_PROCESS
  REFUNDED
  CHARGED_BACK
}

enum DeviceType {
  MOBILE
  DESKTOP
}

model AccessLog {
  id          Int        @id @default(autoincrement())
  userId      Int?
  ip          String
  city        String?
  browser     String      @default("Other")  // evita insert falhar
  deviceType  DeviceType
  isIphone    Boolean     @default(false)    // evita insert falhar
  createdAt   DateTime    @default(now())
  deviceBrand String?
  deviceModel String?

  user        User?       @relation(fields: [userId], references: [id])

  @@index([userId], map: "AccessLog_userId_fkey")
}

model Coupon {
    id              String              @id
    code            String              @unique
    discount        Float
    discountType    Coupon_discountType
    maxUses         Int                 @default(-1)
    startAmount     Int                 @default(-1)
    availableAmount Int                 @default(-1)
    isActive        Boolean             @default(true)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime
    productId       Int?
}

enum Coupon_discountType {
    PERCENTAGE
    FIXED
}
model Category {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime  @default(now())
    products    Product[]
}